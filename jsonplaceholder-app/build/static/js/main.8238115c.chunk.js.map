{"version":3,"sources":["components/TableRow/TableRow.js","components/Modal/Modal.js","components/PostInfo/PostInfo.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","this","props","post","onOpenModal","className","id","onClick","userId","title","React","Component","Modal","el","document","createElement","querySelector","appendChild","removeChild","ReactDOM","createPortal","children","PostInfo","state","isLoading","userInfo","fetch","postInfo","then","response","json","data","setState","catch","err","console","log","innerHTML","onCloseModal","colSpan","body","name","username","email","address","street","suite","city","zipcode","geo","lat","lng","phone","website","company","catchPhrase","bs","App","handleOpenModal","isModalOpen","handleCloseModal","posts","getElementById","map","key","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8238115c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './TableRow.css';\r\n\r\nexport default class TableRow extends React.Component {\r\n    render() {\r\n        const {post, onOpenModal} = this.props;\r\n        return (\r\n            <tr className={\"tableRow-id-\" + post.id} onClick={() => onOpenModal(post)}>\r\n                <td>{post.id}</td>\r\n                <td>{post.userId}</td>\r\n                <td>\r\n                    <div>\r\n                        <span>{post.title}</span>\r\n                        <button\r\n                            className={\"tableRow-button-id-\" + post.id}\r\n                            onClick={() => onOpenModal(post)}>\r\n                            Open full info\r\n                        </button>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nexport default class Modal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.el = document.createElement('div');\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.querySelector('.modal').appendChild(this.el)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.querySelector('.modal').removeChild(this.el)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            ReactDOM.createPortal(\r\n                this.props.children,\r\n                this.el,\r\n            )\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./PostInfo.css\"\r\n\r\nexport default class PostInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: true,\r\n            userInfo: {},\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(`https://jsonplaceholder.typicode.com/users/${this.props.postInfo.userId}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    isLoading: false,\r\n                    userInfo: data,\r\n                })\r\n            })\r\n            .catch(err => {\r\n                console.log('Fetch for users data failed');\r\n                document.querySelector('.postInfo').innerHTML = 'Sorry, server is not available now';\r\n                this.setState({ isLoading: false })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const {isLoading, userInfo} = this.state;\r\n        const {postInfo, onCloseModal} = this.props;\r\n        return (\r\n            <div className=\"postInfo\">\r\n                {isLoading ?\r\n                    <div className='postInfo-loading'>Loading...</div> :\r\n\r\n                    <>\r\n                        <button className='postInfo-button' onClick={onCloseModal}>Close</button>\r\n                        <table className='postInfo-table'>\r\n                            <caption>Post information</caption>\r\n\r\n                            <thead>\r\n                            <tr>\r\n                                <th>Property</th>\r\n                                <th>Value</th>\r\n                            </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td colSpan='2' className='postInfo-table-separator'>Post</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>id</td>\r\n                                    <td>{postInfo.id}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>title</td>\r\n                                    <td>{postInfo.title}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>body</td>\r\n                                    <td>{postInfo.body}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td colSpan='2' className='postInfo-table-separator'>User</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>id</td>\r\n                                    <td>{userInfo.id}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>name</td>\r\n                                    <td>{userInfo.name}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>username</td>\r\n                                    <td>{userInfo.username}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>email</td>\r\n                                    <td>{userInfo.email}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>address</td>\r\n                                    <td><span>street:</span> {userInfo.address.street}<br/>\r\n                                        <span>suite:</span> {userInfo.address.suite}<br/>\r\n                                        <span>city:</span> {userInfo.address.city}<br/>\r\n                                        <span>zipcode:</span> {userInfo.address.zipcode}<br/>\r\n                                        <span>geo:</span> latitude: {userInfo.address.geo.lat}, longitude: {userInfo.address.geo.lng}<br/>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>phone</td>\r\n                                    <td>{userInfo.phone}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>website</td>\r\n                                    <td>{userInfo.website}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>company</td>\r\n                                    <td><span>name:</span> {userInfo.company.name}<br/>\r\n                                        <span>catchPhrase:</span> {userInfo.company.catchPhrase}<br/>\r\n                                        <span>bs:</span> {userInfo.company.bs}<br/>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport TableRow from \"./components/TableRow/TableRow\";\nimport Modal from \"./components/Modal/Modal\";\nimport PostInfo from \"./components/PostInfo/PostInfo\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isModalOpen: false,\n            isLoading: true,\n            posts: [],\n            postInfo: {},\n        };\n    }\n\n    handleOpenModal = (post) => {\n        this.setState({\n            isModalOpen: true,\n            postInfo: post,\n        })\n    };\n\n    handleCloseModal = () => {\n        this.setState({\n            isModalOpen: false,\n            postInfo: {}\n        })\n    };\n\n    componentDidMount() {\n        fetch(`https://jsonplaceholder.typicode.com/posts`)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    posts: data,\n                    isLoading: false\n                });\n            })\n            .catch(err => {\n                console.log(\"Fetch for post data failed\");\n                document.getElementById('root').innerHTML = 'Sorry, server is not available now';\n                this.setState({isLoading: false});\n            });\n    }\n\n    render() {\n        const {isLoading, isModalOpen, posts, postInfo,} = this.state;\n        return (\n            <>\n                {isLoading ?\n                    <div className='main-loading'>Loading...</div> :\n\n                    <div className='main'>\n                        <table className='table'>\n                            <caption>Post information</caption>\n\n                            <thead>\n                            <tr>\n                                <th>id</th>\n                                <th>userId</th>\n                                <th>title</th>\n                            </tr>\n                            </thead>\n\n                            <tbody>\n                            {posts.map((post) => (\n                                <TableRow\n                                    key={post.id}\n                                    post={post}\n                                    onOpenModal={this.handleOpenModal}\n                                />))\n                            }\n                            </tbody>\n                        </table>\n\n                        <div className=\"modal\">\n                            {isModalOpen &&\n                            <Modal>\n                                <PostInfo\n                                    onCloseModal={this.handleCloseModal}\n                                    postInfo={postInfo}\n                                />\n                            </Modal>\n                            }\n                        </div>\n                    </div>}\n            </>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}